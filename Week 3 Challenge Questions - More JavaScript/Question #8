<!--What is the meaning of NaN (Not a Number) in JavaScript, and how is it used? 

  NaN is a property of the global object/global in scope, and it is the same value as Number.Nan.  In most modern browsers, NaN is a non-configurable and non-writable property, and it is rare to use it in a program.

  There are five different types of operations that will return NaN:
  >When a number cannot be parsed (Ex. Number(undefined))
  >In a Math operation where the result is not a real number (Ex. Math.sqrt(-3))
  >When the Operand of an argument is NaN (Ex. 5 ** NaN)
  >With Indeterminate forms (Ex. Infinity or Undefined)
  >With any operation that involves a string and is not an addition operation (Ex. "bar"/8)

  It can be used in JavaScript functions when a return value is required to be a number, providing a Bolean-type of feedback, True or False, as in the following example:
  
  isNaN() is a function that determines whether the value is a NaN (not a number) or is in fact a number.
  
  I is recommended to use isNan() or Number.isNan() to determine whether a value is NaN.NaN is unequal to any other value, including itself:
  NaN === NaN;  Returns: False
  Number.NaN === NaN; Returns: False
  
  Note a difference between isNaN() and Number.isNaN() is that isNaN() will return True if the value is currently NaN or if it is going to be NaN after it is coerced to a number.  However, Number.isNaN() will only return True if the value is currently NaN.
  
  For example:

  isNaN('hello world');   Returns: True

  Number.isNaN('hello world');    Returns: False

  Finally, it is important to note that some array methods cannot find NaN.
  
  Source: MDN Web Docs-->